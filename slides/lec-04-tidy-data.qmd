---
title: "Concept of Tidy Data, Vectors & Pivoting"
subtitle: "CVEN 5837 - Summer 2023"
author: "Lars Sch√∂bitz"
format: 
  revealjs: 
    theme: "../style/slides.scss"
    transition: fade
    slide-number: true
    logo: img/logo.png
    footer: "https://cven5873-ss23.github.io/website/"
editor: source
execute:
  freeze: auto
params:
    module: 5
bibliography: references.bib
editor_options: 
  chunk_output_type: console
---

```{=html}
<script defer data-domain="cven5837-ss23.github.io/website" src="https://plausible.io/js/plausible.js"></script>
```
```{r}
library(tidyverse)
library(knitr)

ggplot2::theme_set(ggplot2::theme_gray(base_size = 16))

```

```{r}

waste_data_lord1 <- read_csv(
  here::here("slides/data/waste-characterisation-lord-of-the-bins-sheet1.csv"))

waste_data_lord2 <- read_csv(
  here::here("slides/data/waste-characterisation-lord-of-the-bins-sheet2.csv"))

survey_data <- read_csv(here::here("slides/data/survey-data-partners-in-grime.csv")) |> 
  mutate(id = seq(1:n()))

survey_data_small <- survey_data |> 
  select(id, job, price_glass)

survey_data_tidy <- survey_data |> 
  select(id, job, residence_situation, starts_with("price")) |> 
  pivot_longer(cols = starts_with("price"),
               names_to = "waste_category",
               values_to = "price") |> 
  mutate(waste_category = str_remove(waste_category, pattern = "price_")) |> 
  mutate(price_new = case_when(
    price == "5 to 10" ~ "7.5",
    price == "05-Oct" ~ "7.5",
    str_detect(price, pattern = "20") == TRUE ~ "20",
    str_detect(price, pattern = "See comment") == TRUE ~ NA_character_,
    TRUE ~ price
  )) |> 
  mutate(price = as.numeric(price_new)) |> 
  select(-price_new)

# survey_data_tidy |> 
#   count(job, residence_situation, waste_category, price) |> 
#   ggplot(aes(x = factor(price), y = n, fill = job)) +
#   geom_col()
# 
```

```{r}
#| eval: true

waste_data <- bind_rows(waste_data_lord1, waste_data_lord2)

waste_data_untidy <- waste_data |> 
  filter(!is.na(objid)) |> 
  rename(non_recyclable_Kg = `non_recyclables_ Kg`,
         recyclable_Kg = recyclables_Kg) |>
  relocate(c(recyclable_Kg, non_recyclable_Kg), .before = weight_total_kg) |> 
  select(objid, location, pet_Kg:weight_total_kg) |> 
  mutate(objid = factor(objid)) |>
  rename_with(~str_remove(.x, "_Kg|_kg")) |> 
  rename_with(~str_remove(.x, "_content")) |> 
  rename(total = weight_total)


waste_category_levels <- c("glass", "metal_alu", "paper", "pet", "other")

waste_data_tidy <- waste_data_untidy |> 
  select(objid:paper, non_recyclable) |> 
  rename(other = non_recyclable) |> 
  mutate(objid = factor(objid)) |>
  pivot_longer(cols = pet:other,
               names_to = "waste_category",
               values_to = "weight") |> 
  mutate(waste_category = factor(waste_category, levels = waste_category_levels)) |> 
  mutate(type = case_when(
    waste_category == "other" ~ "non_recyclable",
    TRUE ~ "recyclable")) |> 
  relocate(type, .before = weight) |> 
  group_by(objid) |> 
  mutate(percent = weight / sum(weight) * 100)

waste_data_tidy |> 
  write_rds(here::here("slides/data/intermediate_data/waste-characterisation-lord-of-the-bins-tidy.rds"))

```

```{r}
#| eval: false

waste_data_tidy |> 
  group_by(location, waste_category) |> 
  summarise(weight = mean(weight)) |> 
  group_by(location) |> 
  mutate(percent = weight / sum(weight) * 100) 

waste_data_tidy |> 
  
  ggplot(mapping = aes(x = waste_category, y = weight, color = type)) +
  geom_boxplot() +
  geom_jitter(width = 0.2) +
  facet_wrap(~location)

waste_data_tidy |> 
  ggplot(mapping = aes(x = objid, y = weight)) +
  geom_col() 

waste_data_tidy |> 
  ggplot(mapping = aes(x = objid, y = weight, fill = waste_category)) +
  geom_col() 

waste_data_tidy |> 
  ggplot(mapping = aes(x = waste_category, y = percent, color = type)) +
  geom_boxplot() +
  geom_jitter(width = 0.2) +
  facet_wrap(~location)


waste_data_tidy |> 
  ggplot(aes(x = objid, y = percent, fill = waste_category)) +
  geom_col() 

waste_data_tidy |> 
  ggplot(aes(x = objid, y = percent, fill = type)) +
  geom_col() 

waste_data_tidy |> 
  ggplot(aes(x = objid, y = percent, fill = location)) +
  geom_col() +
  facet_wrap(~waste_category, ncol = 5)
```

## Exam Update

-   No exam anymore in Week 8
-   Due date for Capstone Project will be extended (due on 28th July)
-   Capstone Project contributes 40% to grade instead of 20%

| type                 | percent |
|----------------------|---------|
| Homework assignments | 40      |
| Learning reflections | 20      |
| Capstone project     | 40      |

## Learning Objectives (for this week)

```{r}

lobj1 <- readr::read_csv(here::here("data/tbl-01-rbtl-fs25-learning-objectives.csv")) |> 
  dplyr::filter(module == params$module) |>
  dplyr::pull(learning_objectives)

```

1.  `r lobj1[1]`
2.  `r lobj1[2]`
3.  `r lobj1[3]`

# Part 1: Data types and vectors {background-color="#0F4C81"}

## Why care about data types?

::: {style="width:75%;height:0;padding-bottom:83%;position:relative;"}
<iframe src="https://giphy.com/embed/SvRuvlSEa67wNNHuHy" width="75%" height="75%" style="position:absolute" frameBorder="0" class="giphy-embed" allowFullScreen>

</iframe>
:::

<p><a href="https://giphy.com/gifs/Friends-episode-20-friends-tv-the-one-with-baby-shower-SvRuvlSEa67wNNHuHy">via GIPHY</a></p>

## Example: survey data {.smaller .scrollable}

```{r}
#| echo: false
survey_data_small |> 
  knitr::kable()
```

::: footer
Data from: [@benaleya2022]
:::

## Oh why won't you work?! {.smaller}

```{r}
#| echo: true
survey_data_small |> 
  summarise(mean_price_glass = mean(price_glass))

```

## Oh why won't you still work??!! {.smaller}

```{r}
#| echo: true
survey_data_small |> 
  summarise(mean_price_glass = mean(price_glass, na.rm = TRUE))
```

## Take a breath and look at your data {.smaller}

```{r}
#| echo: false
survey_data_small |> 
  knitr::kable()
```

## Very common data tidying step! {.smaller}

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "|2|3,4|5,6|7"

survey_data_small |> 
  mutate(price_glass_new = case_when(
    price_glass == "5 to 10" ~ "7.5",
    price_glass == "05-Oct" ~ "7.5",
    str_detect(price_glass, pattern = "2chf") == TRUE ~ "20",
    str_detect(price_glass, pattern = "See comment") == TRUE ~ NA_character_,
    TRUE ~ price_glass
  )) 
```

## Very common data tidying step! {.scrollable .smaller}

```{r}
#| echo: false
#| eval: true
survey_data_small |> 
  mutate(price_glass_new = case_when(
    price_glass == "5 to 10" ~ "7.5",
    price_glass == "05-Oct" ~ "7.5",
    str_detect(price_glass, pattern = "20") == TRUE ~ "20",
    str_detect(price_glass, pattern = "See comment") == TRUE ~ NA_character_,
    TRUE ~ price_glass
  )) |> 
  relocate(price_glass_new, .after = job) |> 
  knitr::kable()
```

## Sumamrise? Argh!!!! {.smaller auto-animate="true"}

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "9"

survey_data_small |> 
  mutate(price_glass_new = case_when(
    price_glass == "5 to 10" ~ "7.5",
    price_glass == "05-Oct" ~ "7.5",
    str_detect(price_glass, pattern = "20") == TRUE ~ "20",
    str_detect(price_glass, pattern = "See comment") == TRUE ~ NA_character_,
    TRUE ~ price_glass
  )) |> 
  summarise(mean_price_glass = mean(price_glass_new, na.rm = TRUE))

```

## Always respect your data types!

::: {.callout-important appearance="simple"}
Taking the mean of vector with type **"character"** is not possible.
:::

```{r}
survey_data_small |> 
  mutate(price_glass_new = case_when(
    price_glass == "5 to 10" ~ "7.5",
    price_glass == "05-Oct" ~ "7.5",
    str_detect(price_glass, pattern = "20") == TRUE ~ "20",
    str_detect(price_glass, pattern = "See comment") == TRUE ~ NA_character_,
    TRUE ~ price_glass
  )) 
```

## Always respect your data types! {.smaller auto-animate="true"}

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "9|10"

survey_data_small |> 
  mutate(price_glass_new = case_when(
    price_glass == "5 to 10" ~ "7.5",
    price_glass == "05-Oct" ~ "7.5",
    str_detect(price_glass, pattern = "20") == TRUE ~ "20",
    str_detect(price_glass, pattern = "See comment") == TRUE ~ NA_character_,
    TRUE ~ price_glass
  )) |> 
  mutate(price_glass_new = as.numeric(price_glass_new)) |> 
  summarise(mean_price_glass = mean(price_glass_new, na.rm = TRUE))

```

# Live Coding Exercise: Vectors {background-color="#0F4C81"}

## live-05a-vectors

1. Head over to posit.cloud
2. Open the workspace for the course [(cven5837-ss23)](https://posit.cloud/spaces/381404/content/all?sort=name_asc)
3. Open your "course-materials" project
4. Follow along with me

# Break One

![](img/lec-01/coffee-break.jpg)

```{r}

countdown::countdown(
  minutes = 10, seconds = 0,
  left = 0, right = 0,
  padding = "10px", margin = "5%",
  font_size = "2em"
)

```

::: aside
Photo by [Blake Wisz](https://unsplash.com/@blakewisz)
:::

# Part 2: tidyr - long and wide formats {background-color="#0F4C81"}

## . {background-image="img/lec-04/tidydata_1.jpg" background-size="contain"}

::: aside
Illustrations from the [Openscapes](https://www.openscapes.org/) blog [Tidy Data for reproducibility, efficiency, and collaboration](https://www.openscapes.org/blog/2020/10/12/tidy-data/) by [Julia Lowndes](https://twitter.com/juliesquid) and [Allison Horst](https://twitter.com/allison_horst)
:::

## . {background-image="img/lec-04/tidydata_2.jpg" background-size="contain"}

::: aside
Illustrations from the [Openscapes](https://www.openscapes.org/) blog [Tidy Data for reproducibility, efficiency, and collaboration](https://www.openscapes.org/blog/2020/10/12/tidy-data/) by [Julia Lowndes](https://twitter.com/juliesquid) and [Allison Horst](https://twitter.com/allison_horst)
:::

## . {background-image="img/lec-04/tidydata_3.jpg" background-size="contain"}

::: aside
Illustrations from the [Openscapes](https://www.openscapes.org/) blog [Tidy Data for reproducibility, efficiency, and collaboration](https://www.openscapes.org/blog/2020/10/12/tidy-data/) by [Julia Lowndes](https://twitter.com/juliesquid) and [Allison Horst](https://twitter.com/allison_horst)
:::

## A grammar of data tidying {.smaller}

::: columns
::: {.column width="40%"}
```{r dplyr-part-of-tidyverse, echo=FALSE, out.width="60%", caption = "tidyr is part of the tidyverse"}
knitr::include_graphics("img/lec-04/tidyr-part-of-tidyverse.png")
```
:::

::: {.column width="60%"}
The goal of tidyr is to help you tidy your data via

-   pivoting for going between wide and long data
-   splitting and combining character columns
-   nesting and unnesting columns
-   clarifying how `NA`s should be treated
:::
:::

::: aside
Slide taken from [Data Science in a Box](https://datasciencebox.org/)
:::

## Pivoting data

```{r}
knitr::include_graphics("img/lec-04/tidyr-longer-wider.gif")
```

## Waste characterisation data {.smaller}

```{r, out.width="90%"}

waste_data_untidy |> 
  select(-recyclable) |> 
  rename(other = non_recyclable) |> 
  knitr::kable(digits = 2)
```

## How would you plot this?

```{r}

ggplot(data = waste_data_untidy,
       mapping = aes(x = objid, y = total, fill = location)) +
  geom_col() + 
  scale_fill_brewer(type = "qual")

```

## Three variables

```{r, out.width="90%"}

waste_data_untidy |> 
  select(objid, location, total) |> 
  knitr::kable(digits = 2)

```

## Three variables -\> three aesthetics {.smaller}

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "2-4"
ggplot(data = waste_data_untidy,
       mapping = aes(x = objid, 
                     y = total, 
                     fill = location)) +
  geom_col() + 
  scale_fill_brewer(type = "qual")
```

## And how to plot this?

```{r}

ggplot(data = waste_data_tidy,
       mapping = aes(x = objid, 
                     y = weight, 
                     fill = waste_category)) +
  geom_col() + 
  scale_fill_brewer(type = "qual")

```

## Reminder: Data (in wide format) {.smaller .scrollable}

```{r}
waste_data_untidy |> 
  select(-recyclable, -total) |> 
  rename(other = non_recyclable) |> 
  knitr::kable(digits = 2)
```

## You need: A long format {.smaller .scrollable}

```{r}

waste_data_tidy |> 
  select(-percent, -type) |> 
  knitr::kable(digits = 2)

```

## Three variables -\> three aesthetics {.smaller}

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "2-4"
ggplot(data = waste_data_tidy,
       mapping = aes(x = objid, 
                     y = weight, 
                     fill = waste_category)) +
  geom_col() + 
  scale_fill_brewer(type = "qual")
```

## How to {.smaller .scrollable auto-animate="true"}

```{r}
waste_data_untidy <- waste_data_untidy |> 
  select(-recyclable, -total) |> 
  rename(other = non_recyclable)
```

```{r}
#| echo: true
#| eval: false
waste_data_untidy 
```

```{r}
#| echo: false
waste_data_untidy |> 
  knitr::kable(digits = 2)
```

## How to {.smaller .scrollable auto-animate="true"}

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "2-4"
waste_data_untidy |> 
  pivot_longer(cols = pet:other,
               names_to = "waste_category",
               values_to = "weight") 

```

```{r}
#| echo: false
waste_data_untidy |> 
  pivot_longer(cols = pet:other,
               names_to = "waste_category",
               values_to = "weight") |> 
  knitr::kable(digits = 2)
```

## How to {.smaller .scrollable auto-animate="true"}

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "1|7"
waste_category_levels <- c("glass", "metal_alu", "paper", "pet", "other")

waste_data_untidy |> 
  pivot_longer(cols = pet:other,
               names_to = "waste_category",
               values_to = "weight") |> 
  mutate(waste_category = factor(waste_category, levels = waste_category_levels)) 
```

```{r}
#| echo: false
waste_category_levels <- c("glass", "metal_alu", "paper", "pet", "other")

waste_data_untidy |> 
  pivot_longer(cols = pet:other,
               names_to = "waste_category",
               values_to = "weight") |> 
  mutate(waste_category = factor(waste_category, levels = waste_category_levels)) |> 
  knitr::kable(digits = 2)


```

## Three variables -\> three aesthetics {.smaller}

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "2-4"
ggplot(data = waste_data_tidy,
       mapping = aes(x = objid, 
                     y = weight, 
                     fill = waste_category)) +
  geom_col() + 
  scale_fill_brewer(type = "qual")
```

# Live Coding Exercise: Pivoting {background-color="#0F4C81"}

## live-05a-tidyr-pivoting

1. Head over to posit.cloud
2. Open the workspace for the course [(cven5837-ss23)](https://posit.cloud/spaces/381404/content/all?sort=name_asc)
3. Open your "course-materials" project
4. Follow along with me


# Homework week 5 {background-color="#0F4C81"}

## Homework due dates

-   All material on [course website](https://cven5873-ss23.github.io/website/weeks/wk-05.html)
-   Homework assignment & learning reflection due: **Friday, 7th July**

# Thanks! `r emo::ji("sunflower")` {background-color="#0F4C81"}

## 

Slides created via revealjs and Quarto: https://quarto.org/docs/presentations/revealjs/ Access slides as [PDF on GitHub](https://github.com/cven5873-ss23/website/raw/main/slides/lec-04-tidy-data.pdf)

All material is licensed under [Creative Commons Attribution Share Alike 4.0 International](https://creativecommons.org/licenses/by-sa/4.0/).

## References
